include(xpcfg)
set(sqliteTarget xpro::SQLite3)
if(TARGET ${sqliteTarget})
  get_target_property(sqliteIncludes ${sqliteTarget} INTERFACE_INCLUDE_DIRECTORIES)
endif()
cmake_push_check_state(RESET)
set(CMAKE_REQUIRED_INCLUDES ${sqliteIncludes})
xpcfgCheckIncludeFile(dlfcn.h HAVE_DLFCN_H)
xpcfgCheckIncludeFile(expat.h HAVE_EXPAT_H)
xpcfgCheckIncludeFile(fcntl.h HAVE_FCNTL_H)
xpcfgCheckIncludeFile(float.h HAVE_FLOAT_H)
xpcfgCheckIncludeFile(inttypes.h HAVE_INTTYPES_H)
xpcfgCheckIncludeFile(math.h HAVE_MATH_H)
xpcfgCheckIncludeFile(memory.h HAVE_MEMORY_H)
xpcfgCheckIncludeFile(sqlite3ext.h HAVE_SQLITE3EXT_H)
xpcfgCheckIncludeFile(sqlite3.h HAVE_SQLITE3_H)
xpcfgCheckIncludeFile(stddef.h HAVE_STDDEF_H)
xpcfgCheckIncludeFile(stdint.h HAVE_STDINT_H)
xpcfgCheckIncludeFile(stdio.h HAVE_STDIO_H)
xpcfgCheckIncludeFile(stdlib.h HAVE_STDLIB_H)
xpcfgCheckIncludeFile(strings.h HAVE_STRINGS_H)
xpcfgCheckIncludeFile(string.h HAVE_STRING_H)
xpcfgCheckIncludeFile(sys/stat.h HAVE_SYS_STAT_H)
xpcfgCheckIncludeFile(sys/time.h HAVE_SYS_TIME_H)
xpcfgCheckIncludeFile(sys/types.h HAVE_SYS_TYPES_H)
xpcfgCheckIncludeFile(unistd.h HAVE_UNISTD_H)
xpcfgCheckSymFnExists(fdatasync HAVE_FDATASYNC)
xpcfgCheckSymFnExists(ftruncate HAVE_FTRUNCATE)
xpcfgCheckSymFnExists(getcwd HAVE_GETCWD)
xpcfgCheckSymFnExists(gettimeofday HAVE_GETTIMEOFDAY)
xpcfgCheckSymFnExists(localtime_r HAVE_LOCALTIME_R)
xpcfgCheckSymFnExists(memmove HAVE_MEMMOVE)
xpcfgCheckSymFnExists(memset HAVE_MEMSET)
xpcfgCheckSymFnExists(readline HAVE_READLINE)
xpcfgCheckSymFnExists(sqrt HAVE_SQRT)
xpcfgCheckSymFnExists(strcasecmp HAVE_STRCASECMP)
xpcfgCheckSymFnExists(strerror HAVE_STRERROR)
xpcfgCheckSymFnExists(strftime HAVE_STRFTIME)
xpcfgCheckSymFnExists(strncasecmp HAVE_STRNCASECMP)
xpcfgCheckSymFnExists(strstr HAVE_STRSTR)
xpcfgCheckSymFnExists(SQLITE_CONFIG_URI HAVE_DECL_SQLITE_CONFIG_URI)
xpcfgCheckSymFnExists(SQLITE_DBSTATUS_CACHE_HIT HAVE_DECL_SQLITE_DBSTATUS_CACHE_HIT)
xpcfgCheckSymFnExists(SQLITE_DBSTATUS_CACHE_MISS HAVE_DECL_SQLITE_DBSTATUS_CACHE_MISS)
xpcfgCheckSymFnExists(SQLITE_DBSTATUS_CACHE_USED HAVE_DECL_SQLITE_DBSTATUS_CACHE_USED)
xpcfgCheckSymFnExists(SQLITE_DBSTATUS_CACHE_WRITE HAVE_DECL_SQLITE_DBSTATUS_CACHE_WRITE)
xpcfgCheckSymFnExists(SQLITE_DBSTATUS_LOOKASIDE_HIT HAVE_DECL_SQLITE_DBSTATUS_LOOKASIDE_HIT)
xpcfgCheckSymFnExists(SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL HAVE_DECL_SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL)
xpcfgCheckSymFnExists(SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE HAVE_DECL_SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE)
xpcfgCheckSymFnExists(SQLITE_DBSTATUS_LOOKASIDE_USED HAVE_DECL_SQLITE_DBSTATUS_LOOKASIDE_USED)
xpcfgCheckSymFnExists(SQLITE_DBSTATUS_SCHEMA_USED HAVE_DECL_SQLITE_DBSTATUS_SCHEMA_USED)
xpcfgCheckSymFnExists(SQLITE_DBSTATUS_STMT_USED HAVE_DECL_SQLITE_DBSTATUS_STMT_USED)
xpcfgCheckSymFnExists(SQLITE_FCNTL_VFSNAME HAVE_DECL_SQLITE_FCNTL_VFSNAME)
xpcfgCheckSymFnExists(SQLITE_STMTSTATUS_AUTOINDEX HAVE_DECL_SQLITE_STMTSTATUS_AUTOINDEX)
xpcfgCheckSymFnExists(SQLITE_STMTSTATUS_FULLSCAN_STEP HAVE_DECL_SQLITE_STMTSTATUS_FULLSCAN_STEP)
xpcfgCheckSymFnExists(SQLITE_STMTSTATUS_SORT HAVE_DECL_SQLITE_STMTSTATUS_SORT)
xpcfgCheckSymFnExists(SQLITE_TESTCTRL_EXPLAIN_STMT HAVE_DECL_SQLITE_TESTCTRL_EXPLAIN_STMT)
xpcfgCheckLibraryExists(expat XML_ParserCreate HAVE_LIBEXPAT)
xpcfgCheckLibraryExists(${sqliteTarget} sqlite3_version HAVE_LIBSQLITE3)
xpcfgFnEmptyStringBug(lstat, HAVE_LSTAT_EMPTY_STRING_BUG)
xpcfgFnEmptyStringBug(stat, HAVE_STAT_EMPTY_STRING_BUG)
xpcfgLstatFollowsSlashedSymlink(LSTAT_FOLLOWS_SLASHED_SYMLINK)
set(ENABLE_LIBXML2 FALSE) # TODO find package
set(OMIT_READOSM TRUE) # --enable-readosm : enables ReadOSM inclusion
set(SPATIALITE_AMALGAMATION FALSE) # TODO determine?
xpcfgSetDefineList(ENABLE_LIBXML2 OMIT_READOSM SPATIALITE_AMALGAMATION)
xpcfgStdcHeaders(STDC_HEADERS)
xpcfgTmInHdr(sys/time.h TM_IN_SYS_TIME)
# cmakedefine entries in config.h.cmake.in
xpcfgLtObjdir(LT_OBJDIR)
set(PACKAGE ${CMAKE_PROJECT_NAME})
set(PACKAGE_BUGREPORT a.furieri@lqt.it)
set(PACKAGE_NAME ${CMAKE_PROJECT_NAME})
set(PACKAGE_STRING "${CMAKE_PROJECT_NAME} ${CMAKE_PROJECT_VERSION}${xVer}")
set(PACKAGE_TARNAME ${CMAKE_PROJECT_NAME})
set(PACKAGE_URL https://www.gaia-gis.it/fossil/libspatialite/home)
set(PACKAGE_VERSION ${CMAKE_PROJECT_VERSION}${xVer})
set(VERSION ${CMAKE_PROJECT_VERSION}${xVer})
xpcfgHugeFileSupport()
xpcfgConst()
xpcfgCheckTypeSize()
if(NOT HAVE_SIZEOF_OFF_T)
  set(off_t "long int") # Define to `long int' if <sys/types.h> does not define. */
endif()
if(NOT HAVE_SIZEOF_SIZE_T)
  set(size_t "unsigned int") # Define to `unsigned int' if <sys/types.h> does not define.
endif()
xpcfgVolatile(volatile)
cmake_pop_check_state()
if(WIN32)
  set(msvc -msvc)
endif()
set(CONFIG_H_COMMENT "{CMAKE_BINARY_DIR}/cmake/config${msvc}.h.  Generated from cmake/config.h.cmake.in by cmake/configure.cmake.")
configure_file(${CMAKE_CURRENT_LIST_DIR}/config.h.cmake.in ${CMAKE_BINARY_DIR}/CMakeFiles/config.h.cmake)
configure_file(${CMAKE_BINARY_DIR}/CMakeFiles/config.h.cmake ${CMAKE_BINARY_DIR}/cmake/config${msvc}.h)
